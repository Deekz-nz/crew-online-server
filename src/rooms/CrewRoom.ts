/*
  GENERATED BY CHAT-GPT
*/
// File: src/rooms/CrewRoom.ts
import { Room, Client } from "colyseus";
import { Schema, type, MapSchema, ArraySchema } from "@colyseus/schema";

// === Define Card ===
class Card extends Schema {
  @type("string") color!: string; // "yellow" | "green" | "pink" | "blue"
  @type("number") number!: number; // 1 - 9
}

// === Define Player ===
class Player extends Schema {
  @type("string") sessionId!: string;
  @type([Card]) hand = new ArraySchema<Card>();
  @type("boolean") isMyTurn: boolean = false;
}

// === Define Room State ===
class GameState extends Schema {
  @type({ map: Player }) players = new MapSchema<Player>();
  @type("string") currentTurnSessionId: string = "";
  @type([Card]) playedCards = new ArraySchema<Card>();
}

export class CrewRoom extends Room<GameState> {
  maxClients = 2;

  onCreate(options: any) {
    this.state = new GameState();

    this.onMessage("play_card", (client, cardData: { color: string; number: number }) => {
      const player = this.state.players.get(client.sessionId);
      if (!player || this.state.currentTurnSessionId !== client.sessionId) return;

      // Find and remove the card from player's hand
      const cardIndex = player.hand.findIndex(
        (card) => card.color === cardData.color && card.number === cardData.number
      );
      if (cardIndex === -1) return; // Card not found

      const [playedCard] = player.hand.splice(cardIndex, 1);
      this.state.playedCards.push(playedCard);

      // Switch turn to other player
      const otherPlayerId = Array.from(this.state.players.keys()).find(
        (id) => id !== client.sessionId
      );
      if (otherPlayerId) {
        player.isMyTurn = false;
        this.state.players.get(otherPlayerId)!.isMyTurn = true;
        this.state.currentTurnSessionId = otherPlayerId;
      }
    });
  }

  onJoin(client: Client, options: any) {
    const player = new Player();
    player.sessionId = client.sessionId;
    player.hand = new ArraySchema<Card>(...this.generateHand());

    this.state.players.set(client.sessionId, player);

    // If two players are connected, start the game
    if (this.clients.length === 2) {
      const firstPlayerId = this.clients[0].sessionId;
      this.state.currentTurnSessionId = firstPlayerId;
      this.state.players.get(firstPlayerId)!.isMyTurn = true;
    }
  }

  onLeave(client: Client, consented: boolean) {
    this.state.players.delete(client.sessionId);
  }

  generateHand(): Card[] {
    const colors = ["yellow", "green", "pink", "blue"];
    const hand: Card[] = [];
    while (hand.length < 10) {
      const card = new Card();
      card.color = colors[Math.floor(Math.random() * colors.length)];
      card.number = Math.floor(Math.random() * 9) + 1;
      hand.push(card);
    }
    return hand;
  }
}
